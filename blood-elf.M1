
# Core program

# Defining function consume_token
:FUNCTION_consume_token
# Defining local i
LOAD_IMMEDIATE_eax %0
PUSH_eax	#i
# Defining local c
LOAD_EFFECTIVE_ADDRESS %12
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
PUSH_eax	#c
:DO_consume_token_0

LOAD_EFFECTIVE_ADDRESS %12
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
ADD_ebx_to_eax
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_CHAR
LOAD_EFFECTIVE_ADDRESS %4
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %1
POP_ebx	# _common_recursion
ADD_ebx_to_eax
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %20
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_eax %32
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %9
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
POP_ebx	# _common_recursion
AND_eax_ebx
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %10
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
POP_ebx	# _common_recursion
AND_eax_ebx
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %62
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
POP_ebx	# _common_recursion
AND_eax_ebx
TEST
JUMP_NE %DO_consume_token_0

:DO_END_consume_token_0

POP_ebx	# _recursive_statement_locals
POP_ebx	# _recursive_statement_locals
RETURN
# Defining function storeLabel
:FUNCTION_storeLabel
# Defining local entry
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %8
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_calloc
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
PUSH_eax	#entry
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %4096
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %1
POP_ebx	# _common_recursion
ADD_ebx_to_eax
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_calloc
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_consume_token
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
# IF_storeLabel_0

LOAD_IMMEDIATE_eax %95
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %0
POP_ebx	# _common_recursion
ADD_ebx_to_eax
LOAD_BYTE
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_storeLabel_0

LOAD_IMMEDIATE_eax &GLOBAL_jump_table
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_storeLabel_0

:ELSE_storeLabel_0

:_END_IF_storeLabel_0

POP_ebx	# _recursive_statement_locals
RETURN
# Defining function line_Comment
:FUNCTION_line_Comment
# Defining local c
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
PUSH_eax	#c
:WHILE_line_Comment_0

LOAD_IMMEDIATE_eax %10
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %13
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
POP_ebx	# _common_recursion
AND_eax_ebx
TEST
JUMP_EQ %END_WHILE_line_Comment_0

# THEN_while_line_Comment_0

LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %12
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %WHILE_line_Comment_0

:END_WHILE_line_Comment_0

POP_ebx	# _recursive_statement_locals
RETURN
# Defining function purge_string
:FUNCTION_purge_string
# Defining local c
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
PUSH_eax	#c
:WHILE_purge_string_0

LOAD_IMMEDIATE_eax %0xFFFFFFFF
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %34
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
POP_ebx	# _common_recursion
AND_eax_ebx
TEST
JUMP_EQ %END_WHILE_purge_string_0

# THEN_while_purge_string_0

LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %12
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %WHILE_purge_string_0

:END_WHILE_purge_string_0

POP_ebx	# _recursive_statement_locals
RETURN
# Defining function first_pass
:FUNCTION_first_pass
# IF_first_pass_0

LOAD_IMMEDIATE_eax %0
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_first_pass_0

RETURN
JUMP %_END_IF_first_pass_0

:ELSE_first_pass_0

:_END_IF_first_pass_0

LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_first_pass
POP_ebx	# _process_expression_locals
# Defining local source_file
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_0

PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_fopen
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
PUSH_eax	#source_file
# IF_first_pass_1
LOAD_IMMEDIATE_eax %0
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_first_pass_1
LOAD_IMMEDIATE_eax &STRING_1
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_2
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_exit
POP_ebx	# _process_expression_locals
JUMP %_END_IF_first_pass_1
:ELSE_first_pass_1
:_END_IF_first_pass_1
# Defining local c
PUSH_eax	#c
# FOR_initialization_first_pass_2
LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
:FOR_first_pass_2
LOAD_IMMEDIATE_eax %0xFFFFFFFF
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
TEST
JUMP_EQ %FOR_END_first_pass_2
JUMP %FOR_THEN_first_pass_2
:FOR_ITER_first_pass_2
LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fgetc
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %FOR_first_pass_2
:FOR_THEN_first_pass_2
# IF_first_pass_3
LOAD_IMMEDIATE_eax %58
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_first_pass_3
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_storeLabel
POP_ebx	# _process_expression_locals
JUMP %_END_IF_first_pass_3
:ELSE_first_pass_3
# IF_first_pass_4
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %35
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %59
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
POP_ebx	# _common_recursion
OR_eax_ebx
TEST
JUMP_EQ %ELSE_first_pass_4
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_line_Comment
POP_ebx	# _process_expression_locals
JUMP %_END_IF_first_pass_4
:ELSE_first_pass_4
# IF_first_pass_5
LOAD_IMMEDIATE_eax %34
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_first_pass_5
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_purge_string
POP_ebx	# _process_expression_locals
JUMP %_END_IF_first_pass_5
:ELSE_first_pass_5
:_END_IF_first_pass_5
:_END_IF_first_pass_4
:_END_IF_first_pass_3
JUMP %FOR_ITER_first_pass_2
:FOR_END_first_pass_2
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_fclose
POP_ebx	# _process_expression_locals
POP_ebx	# _recursive_statement_locals
POP_ebx	# _recursive_statement_locals
RETURN
# Defining function output_debug
:FUNCTION_output_debug
# Defining local i
PUSH_eax	#i
# FOR_initialization_output_debug_0

LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %16
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
:FOR_output_debug_0

LOAD_IMMEDIATE_eax %0
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
TEST
JUMP_EQ %FOR_END_output_debug_0

JUMP %FOR_THEN_output_debug_0

:FOR_ITER_output_debug_0

LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %FOR_output_debug_0

:FOR_THEN_output_debug_0

# IF_output_debug_1
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
TEST
JUMP_EQ %ELSE_output_debug_1
LOAD_IMMEDIATE_eax &STRING_3
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_4
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_5
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
JUMP %_END_IF_output_debug_1
:ELSE_output_debug_1
LOAD_IMMEDIATE_eax &STRING_6
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_7
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_8
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
:_END_IF_output_debug_1
JUMP %FOR_ITER_output_debug_0

:FOR_END_output_debug_0

POP_ebx	# _recursive_statement_locals
RETURN
# Defining function reverse_list
:FUNCTION_reverse_list
# Defining local root
LOAD_IMMEDIATE_eax %0
PUSH_eax	#root
# Defining local next
PUSH_eax	#next
:WHILE_reverse_list_0

LOAD_IMMEDIATE_eax %0
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %16
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETNE
MOVEZBL
TEST
JUMP_EQ %END_WHILE_reverse_list_0

# THEN_while_reverse_list_0

LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %12
LOAD_INTEGER
# looking up offset
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %4
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %16
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %12
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %WHILE_reverse_list_0

:END_WHILE_reverse_list_0

LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _return_result_locals
POP_ebx	# _return_result_locals
RETURN
# Defining function main
:FUNCTION_main
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %0
POP_ebx	# _common_recursion
STORE_INTEGER
# Defining local input
LOAD_IMMEDIATE_eax %0
PUSH_eax	#input
LOAD_IMMEDIATE_eax &GLOBAL_output
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %1
POP_ebx	# _common_recursion
STORE_INTEGER
# Defining local output_file
LOAD_IMMEDIATE_eax &STRING_9
PUSH_eax	#output_file
# Defining local option_index
LOAD_IMMEDIATE_eax %1
PUSH_eax	#option_index
:WHILE_main_0

LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %20
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETLE
MOVEZBL
TEST
JUMP_EQ %END_WHILE_main_0

# THEN_while_main_0

# IF_main_1
LOAD_IMMEDIATE_eax %0
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %24
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_main_1
LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %1
POP_ebx	# _common_recursion
ADD_ebx_to_eax
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_main_1
:ELSE_main_1
# IF_main_2
LOAD_EFFECTIVE_ADDRESS %20
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_10
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %24
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_11
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
OR_eax_ebx
TEST
JUMP_EQ %ELSE_main_2
LOAD_IMMEDIATE_eax &STRING_12
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_EFFECTIVE_ADDRESS %20
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %0
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_13
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax %0
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_exit
POP_ebx	# _process_expression_locals
JUMP %_END_IF_main_2
:ELSE_main_2
# IF_main_3
LOAD_EFFECTIVE_ADDRESS %20
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_14
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %24
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_15
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
OR_eax_ebx
TEST
JUMP_EQ %ELSE_main_3
# Defining local temp
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %8
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_calloc
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
PUSH_eax	#temp
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %28
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %12
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %1
POP_ebx	# _common_recursion
ADD_ebx_to_eax
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %0

LOAD_INTEGER
# looking up offset
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %16
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %12
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_EFFECTIVE_ADDRESS %4
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %2
POP_ebx	# _common_recursion
ADD_ebx_to_eax
POP_ebx	# _common_recursion
STORE_INTEGER
POP_ebx	# _recursive_statement_locals
JUMP %_END_IF_main_3
:ELSE_main_3
# IF_main_4
LOAD_EFFECTIVE_ADDRESS %20
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_16
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %24
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_17
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
OR_eax_ebx
TEST
JUMP_EQ %ELSE_main_4
LOAD_EFFECTIVE_ADDRESS %4
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %24
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %1
POP_ebx	# _common_recursion
ADD_ebx_to_eax
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_eax &GLOBAL_output
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_18
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_fopen
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
# IF_main_5
LOAD_IMMEDIATE_eax %0
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_main_5
LOAD_IMMEDIATE_eax &STRING_19
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_ebx %4
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_20
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_exit
POP_ebx	# _process_expression_locals
JUMP %_END_IF_main_5
:ELSE_main_5
:_END_IF_main_5
LOAD_EFFECTIVE_ADDRESS %0

PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax %2
POP_ebx	# _common_recursion
ADD_ebx_to_eax
POP_ebx	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_main_4
:ELSE_main_4
# IF_main_6
LOAD_EFFECTIVE_ADDRESS %20
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %4
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_21
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %24
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
POP_ebx	# _common_recursion
SAL_eax_Immediate8 !2
ADD_ebx_to_eax
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &STRING_22
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_match
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
OR_eax_ebx
TEST
JUMP_EQ %ELSE_main_6
LOAD_IMMEDIATE_eax &STRING_23
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax %0
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_exit
POP_ebx	# _process_expression_locals
JUMP %_END_IF_main_6
:ELSE_main_6
LOAD_IMMEDIATE_eax &STRING_24
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %2
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_exit
POP_ebx	# _process_expression_locals
:_END_IF_main_6
:_END_IF_main_4
:_END_IF_main_3
:_END_IF_main_2
:_END_IF_main_1
JUMP %WHILE_main_0

:END_WHILE_main_0

# IF_main_7
LOAD_IMMEDIATE_eax %0
PUSH_eax	#_common_recursion
LOAD_EFFECTIVE_ADDRESS %12
LOAD_INTEGER
POP_ebx	# _common_recursion
CMP
SETE
MOVEZBL
TEST
JUMP_EQ %ELSE_main_7
LOAD_IMMEDIATE_eax %1
POP_ebx	# _return_result_locals
POP_ebx	# _return_result_locals
POP_ebx	# _return_result_locals
RETURN
JUMP %_END_IF_main_7
:ELSE_main_7
:_END_IF_main_7
LOAD_EFFECTIVE_ADDRESS %8
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_first_pass
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
PUSH_eax	#_common_recursion
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
LOAD_INTEGER
PUSH_eax	#_process_expression1
CALL_IMMEDIATE %FUNCTION_reverse_list
POP_ebx	# _process_expression_locals
POP_ebx	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_eax &STRING_25
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %1
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_output_debug
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_26
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &GLOBAL_jump_table
LOAD_INTEGER
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax %0
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_output_debug
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax &STRING_27
PUSH_eax	#_process_expression1
LOAD_IMMEDIATE_eax &GLOBAL_output
LOAD_INTEGER
PUSH_eax	#_process_expression2
CALL_IMMEDIATE %FUNCTION_file_print
POP_ebx	# _process_expression_locals
POP_ebx	# _process_expression_locals
LOAD_IMMEDIATE_eax %0
POP_ebx	# _return_result_locals
POP_ebx	# _return_result_locals
POP_ebx	# _return_result_locals
RETURN

:ELF_data

# Program global variables

:GLOBAL_output
NOP
:GLOBAL_jump_table
NOP

# Program strings

:STRING_0

"r"
:STRING_1
"The file: "
:STRING_2
" can not be opened!
"
:STRING_3
' 3A 45 4C 46 5F 73 74 72 5F 00'
:STRING_4
' 0A 22 00'
:STRING_5
' 22 0A 00'
:STRING_6
"%ELF_str_"
:STRING_7
">ELF_str
&"
:STRING_8
"
%10000
!2
!0
@1
"
:STRING_9
""
:STRING_10
"-h"
:STRING_11
"--help"
:STRING_12
"Usage: "
:STRING_13
" -f FILENAME1 {-f FILENAME2}
"
:STRING_14
"-f"
:STRING_15
"--file"
:STRING_16
"-o"
:STRING_17
"--output"
:STRING_18
"w"
:STRING_19
"The file: "
:STRING_20
" can not be opened!
"
:STRING_21
"-V"
:STRING_22
"--version"
:STRING_23
"blood-elf 0.1
(Basically Launches Odd Object Dump ExecutabLe Files
"
:STRING_24
"Unknown option
"
:STRING_25
' 3A 45 4C 46 5F 73 74 72 0A 21 30 0A 00'
:STRING_26
' 25 30 0A 3A 45 4C 46 5F 73 79 6D 0A 25 30 0A 25 30 0A 25 30 0A 21 30 0A 21 30 0A 40 31 0A 00'
:STRING_27
' 0A 3A 45 4C 46 5F 65 6E 64 0A 00'
