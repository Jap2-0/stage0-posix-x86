# SPDX-FileCopyrightText: Â© 2017 Jeremiah Orians
#
# SPDX-License-Identifier: GPL-3.0-or-later

DEFINE add_eax, 05
DEFINE add_edi, 83C7
DEFINE add_eax,esi 01F0
DEFINE call E8
DEFINE cmp_eax, 83F8
DEFINE cmp_ebp, 83FD
DEFINE int CD
DEFINE je 0F84
DEFINE jl 0F8C
DEFINE jmp E9
DEFINE jne 0F85
DEFINE mov_eax, B8
DEFINE mov_ebp, BD
DEFINE mov_ebx, BB
DEFINE mov_ecx, B9
DEFINE mov_edi, BF
DEFINE mov_edx, BA
DEFINE mov_esi, BE
DEFINE mov_esi,eax 89C6
DEFINE mov_eax,[eax] 8B00
DEFINE mov_al,[DWORD] A0
DEFINE mov_ebx,[DWORD] 8B1D
DEFINE mov_[DWORD],al A2
DEFINE mov_[DWORD],eax A3
DEFINE movzx_eax,al 0FB6C0
DEFINE not_ebp F7D5
DEFINE pop_eax 58
DEFINE pop_ebx 5B
DEFINE ret C3
DEFINE shl_eax, C1E0
DEFINE shl_esi, C1E6
DEFINE mov_[eax],edi 8938
DEFINE sub_eax, 83E8
DEFINE sub_eax,edi 29F8
DEFINE test_eax,eax 85C0


# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function
:_start
	pop_eax                     # Get the number of arguments
	pop_ebx                     # Get the program name
	pop_ebx                     # Get the actual input name
	mov_ecx, %0                 # prepare read_only
	mov_edx, %0                 # extra sure
	mov_eax, %5                 # the syscall number for open()
	int !0x80                   # Now open that damn file
	mov_[DWORD],eax &fin        # Preserve the file pointer we were given

	pop_ebx                     # Get the actual output name
	mov_ecx, %577               # Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	mov_edx, %448               # Prepare file as RWX for owner only (700 in octal)
	mov_eax, %5                 # the syscall number for open()
	int !0x80                   # Now open that damn file
	mov_[DWORD],eax &fout       # Preserve the file pointer we were given

	mov_ebp, %-1                # Our flag for byte processing
	mov_esi, %0                 # temp storage for the sum
	mov_edi, %0                 # Our starting IP
	call %First_pass            # Process it

	# rewind input file
	mov_ebx,[DWORD] &fin        # Using our input file
	mov_ecx, %0                 # Offset Zero
	mov_edx, %0                 # Whence Zero
	mov_eax, %19                # lseek
	int !0x80

	mov_ebp, %-1                # Our flag for byte processing
	mov_esi, %0                 # temp storage for the sum
	mov_edi, %0                 # Our starting IP
	call %Second_pass           # Process it

	jmp %Done

:First_pass
	call %Read_byte

	# Deal with EOF
	cmp_eax, !-4
	je %First_pass_done

	# Check for :
	cmp_eax, !58
	jne %First_pass_0

	# Deal with label
	call %StoreLabel

:First_pass_0
	# Check for %
	cmp_eax, !37
	je %First_pass_pointer

	# Deal with everything else
	call %hex                   # Process our char

	# Deal with EOF
	cmp_eax, !-4
	je %First_pass_done

	# deal with -1 values
	cmp_eax, !0
	jl %First_pass

	# deal with toggle
	cmp_ebp, !0
	je %First_pass_1
	add_edi, !1                 # Increment IP

:First_pass_1
	not_ebp
	jmp %First_pass

:First_pass_pointer
	# Deal with Pointer to label
	call %Read_byte             # Drop the char
	add_edi, !4                 # Increment IP
	jmp %First_pass             # Loop again

:First_pass_done
	ret

:hex
	# deal with EOF
	cmp_eax, !-4
	je %EOF
	# deal with line comments starting with #
	cmp_eax, !35
	je %ascii_comment
	# deal with line comments starting with ;
	cmp_eax, !59
	je %ascii_comment
	# deal all ascii less than 0
	cmp_eax, !48
	jl %ascii_other
	# deal with 0-9
	cmp_eax, !58
	jl %ascii_num
	# deal with all ascii less than A
	cmp_eax, !65
	jl %ascii_other
	# deal with A-F
	cmp_eax, !71
	jl %ascii_high
	# deal with all ascii less than a
	cmp_eax, !97
	jl %ascii_other
	# deal with a-f
	cmp_eax, !103
	jl %ascii_low
	# The rest that remains needs to be ignored
	jmp %ascii_other

:Second_pass
	call %Read_byte

	# Deal with EOF
	cmp_eax, !-4
	je %Second_pass_done

	# Simply drop the label
	cmp_eax, !58
	jne %Second_pass_0

	call %Read_byte
	jmp %Second_pass

:Second_pass_0
	# Deal with  pointer
	cmp_eax, !37
	jne %Second_pass_1

	call %StorePointer
	jmp %Second_pass

:Second_pass_1
	# Deal with everything else
	call %hex                   # Process our char

	# Deal with EOF
	cmp_eax, !-4
	je %Second_pass_done

	# deal with -1 values
	cmp_eax, !0
	jl %Second_pass

	# deal with toggle
	cmp_ebp, !0
	je %print

	# process first byte of pair
	mov_esi,eax
	mov_ebp, %0
	jmp %Second_pass

:Second_pass_done
	ret

:EOF
	ret
:ascii_num
	sub_eax, !48
	ret
:ascii_low
	sub_eax, !87
	ret
:ascii_high
	sub_eax, !55
	ret
:ascii_other
	mov_eax, %-1
	ret
:ascii_comment
	call %Read_byte
	cmp_eax, !13
	je %ascii_comment_cr
	cmp_eax, !10
	jne %ascii_comment
:ascii_comment_cr
	mov_eax, %-1
	ret

# process second byte of pair
:print
	# update the sum and store in output
	shl_esi, !4
	add_eax,esi
	mov_[DWORD],al &table

	# flip the toggle
	not_ebp

	# Print our first Hex
	mov_edx, %1                 # set the size of chars we want
	call %print_chars

	add_edi, !1                 # Increment IP
	jmp %Second_pass

:Done
	# program completed Successfully
	mov_ebx, %0                 # All is well
	mov_eax, %1                 # put the exit syscall number in eax
	int !0x80                   # Call it a good day

:Read_byte
	# Attempt to read 1 byte from STDIN
	mov_edx, %1                 # set the size of chars we want
	mov_ecx, &table             # Where to put it
	mov_ebx,[DWORD] &fin        # Where are we reading from
	mov_eax, %3                 # the syscall number for read
	int !0x80                   # call the Kernel

	test_eax,eax                # check what we got
	je %Read_byte_1             # Got EOF call it done

	# load byte
	mov_al,[DWORD] &table       # load char
	movzx_eax,al                # We have to zero extend it to use it
	ret

# Deal with EOF
:Read_byte_1
	mov_eax, %-4                # Put EOF in eax
	ret

:print_chars
	mov_ecx, &table             # What we are writing
	mov_ebx,[DWORD] &fout       # Write to target file
	mov_eax, %4                 # the syscall number for write
	int !0x80                   # call the Kernel
	ret

:Get_table_target
	call %Read_byte             # Get single char label
	shl_eax, !2                 # Each label in table takes 4 bytes to store
	add_eax, &table             # Calculate offset
	ret

:StoreLabel
	call %Get_table_target
	mov_[eax],edi               # Write out pointer to table
	ret

:StorePointer
	add_edi, !4                 # Increment IP
	call %Get_table_target      # Get address of pointer
	mov_eax,[eax]               # Get pointer
	sub_eax,edi                 # target - ip
	mov_[DWORD],eax &table      # put value in output
	mov_edx, %4                 # set the size of chars we want
	call %print_chars
	ret

:fin
	%0
:fout
	%0
:table
:ELF_end
