# SPDX-FileCopyrightText: Â© 2017 Jeremiah Orians
#
# SPDX-License-Identifier: GPL-3.0-or-later

	# Register usage:
	# EAX, ECX, EBX => Temps
	# EDI => MALLOC
	# EBP => HEAD
	# [Output] => Output_file
	# [Input] => Input_file

	# Struct format: (size 32)
	# NEXT => 0
	# TYPE => 8
	# TEXT => 16
	# EXPRESSION => 24

	# Types
	# None => 0
	# MACRO => 1
	# STRING => 2

DEFINE add_al, 04
DEFINE add_eax, 83C0
DEFINE add_ebx, 83C3
DEFINE add_ecx, 83C1
DEFINE add_edx, 83C2
DEFINE add_ebx,eax 01C3
DEFINE add_eax,ecx 01C8
DEFINE and_eax, 83E0
DEFINE call E8
DEFINE cmp_al, 3C
DEFINE cmp_eax, 83F8
DEFINE cmp_ebx, 83FB
DEFINE cmp_ecx, 83F9
DEFINE cmp_edi, 83FF
DEFINE cmp_edx, 83FA
DEFINE cmp_eax,ebx 39D8
DEFINE cmp_eax,ecx 39C8
DEFINE cmp_ebx,ecx 39D9
DEFINE imul_eax, 6BC0
DEFINE int CD
DEFINE jbe 0F86
DEFINE je 0F84
DEFINE jg 0F8F
DEFINE jl 0F8C
DEFINE jmp E9
DEFINE jne 0F85
DEFINE lea_ecx,[esp] 8D0C24
DEFINE mov_eax, B8
DEFINE mov_ebx, BB
DEFINE mov_ecx, B9
DEFINE mov_edi, BF
DEFINE mov_edx, BA
DEFINE mov_eax,ebp 89E8
DEFINE mov_eax,ebx 89D8
DEFINE mov_eax,ecx 89C8
DEFINE mov_eax,edi 89F8
DEFINE mov_eax,edx 89D0
DEFINE mov_ebp,eax 89C5
DEFINE mov_ebp,edx 89D5
DEFINE mov_ebx,eax 89C3
DEFINE mov_ebx,ebp 89EB
DEFINE mov_ebx,ecx 89CB
DEFINE mov_ebx,edi 89FB
DEFINE mov_ecx,eax 89C1
DEFINE mov_ecx,ebx 89D9
DEFINE mov_edi,eax 89C7
DEFINE mov_edi,ebx 89DF
DEFINE mov_edx,eax 89C2
DEFINE mov_edx,ebx 89DA
DEFINE mov_al,[ebx] 8A03
DEFINE mov_al,[ebx+ecx] 8A040B
DEFINE mov_al,[ecx] 8A01
DEFINE mov_al,[edx] 8A02
DEFINE mov_bl,[eax] 8A18
DEFINE mov_bl,[edx] 8A1A
DEFINE mov_cl,[eax] 8A08
DEFINE mov_cl,[ebx] 8A0B
DEFINE mov_cl,[ebx+BYTE] 8A4B
DEFINE mov_eax,[eax] 8B00
DEFINE mov_eax,[eax+BYTE] 8B40
DEFINE mov_eax,[ebx+BYTE] 8B43
DEFINE mov_eax,[ecx+BYTE] 8B41
DEFINE mov_eax,[edx+BYTE] 8B42
DEFINE mov_eax,[ecx] 8B01
DEFINE mov_ebx,[ebx] 8B1B
DEFINE mov_ebx,[eax+BYTE] 8B58
DEFINE mov_ebx,[ecx+BYTE] 8B59
DEFINE mov_ebx,[DWORD] 8B1D
DEFINE mov_ecx,[eax+BYTE] 8B48
DEFINE mov_ecx,[ebx] 8B0B
DEFINE mov_ecx,[ecx] 8B09
DEFINE mov_edx,[edx] 8B12
DEFINE mov_[eax+BYTE],ebx 8958
DEFINE mov_[ebx],al 8803
DEFINE mov_[ebx],eax 8903
DEFINE mov_[ecx],eax 8901
DEFINE mov_[ecx+BYTE],eax 8941
DEFINE mov_[ecx+BYTE],ebx 8959
DEFINE mov_[edx],cl 880A
DEFINE mov_[edx+BYTE],eax 8942
DEFINE mov_[edx],ebp 892A
DEFINE mov_[edx+BYTE],ecx 894A
DEFINE mov_[DWORD],eax A3
DEFINE movzx_eax,al 0FB6C0
DEFINE movzx_ebx,bl 0FB6DB
DEFINE movzx_ecx,cl 0FB6C9
DEFINE pop_eax 58
DEFINE pop_ebx 5B
DEFINE pop_ecx 59
DEFINE pop_edi 5F
DEFINE pop_edx 5A
DEFINE popf 9D
DEFINE push_eax 50
DEFINE push_ebx 53
DEFINE push_ecx 51
DEFINE push_edi 57
DEFINE push_edx 52
DEFINE pushf 9C
DEFINE ret C3
DEFINE shl_eax, C1E0
DEFINE shr_eax, C1E8
DEFINE sub_ecx, 83E9
DEFINE xchg_eax,ebx 93

# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function

:_start
	pop_eax                     # Get the number of arguments
	pop_ebx                     # Get the program name
	pop_ebx                     # Get the actual input name
	mov_ecx, %0                 # prepare read_only
	mov_eax, %5                 # the syscall number for open()
	int !0x80                   # Now open that damn file
	mov_[DWORD],eax &Input      # Preserve the file pointer we were given

	pop_ebx                     # Get the actual output name
	mov_ecx, %577               # Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	mov_edx, %384               # Prepare file as RW for owner only (600 in octal)
	mov_eax, %5                 # the syscall number for open()
	int !0x80                   # Now open that damn file
	cmp_eax, !0                 # Check for missing output
	jg %_start_out              # Have real input
	mov_eax, %1                 # Use stdout

:_start_out
	mov_[DWORD],eax &Output     # Preserve the file pointer we were given

	mov_eax, %45                # the Syscall # for SYS_BRK
	mov_ebx, %0                 # Get current brk
	int !0x80                   # Let the kernel do the work
	mov_edi,eax                 # Set our malloc pointer

	call %Tokenize_Line         # Get all lines
	mov_eax,ebp                 # prepare for Reverse_List
	call %Reverse_List          # Correct order
	mov_ebp,eax                 # Update HEAD
	call %Identify_Macros       # Find the DEFINEs
	call %Line_Macro            # Apply the DEFINEs
	call %Process_String        # Handle strings
	call %Eval_Immediates       # Handle Numbers
	call %Preserve_Other        # Collect the remaining
	call %Print_Hex             # Output our results

:Done
	# program completed Successfully
	mov_ebx, %0                 # All is well
	mov_eax, %1                 # put the exit syscall number in eax
	int !0x80                   # Call it a good day


# Tokenize_Line Function
# Using input file [Input] and Head EBP
# Creates a linked list of structs
# Uses EBX for in_set strings, ECX for Int C and EDX for Struct Token* p
:Tokenize_Line
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
:restart
	call %fgetc                 # Read a char
	cmp_eax, !-4                # Check for EOF
	je %done                    # File is collected

	movzx_eax,al                # We have to zero extend it to use it
	mov_ecx,eax                 # Protect C

	mov_ebx, &comments          # Get pointer to "#;"
	call %In_Set                # Check for comments
	cmp_eax, !1                 # If comments
	je %Purge_LineComment       # try again

	mov_eax,ecx                 # put C in place for check
	mov_ebx, &terminators       # Get pointer to "\n\t "
	call %In_Set                # Check for terminators
	cmp_eax, !1                 # If terminator
	je %restart                 # try again

	mov_eax, %32                # Malloc the struct P
	call %malloc                # Get pointer to P
	mov_edx,eax                 # Protect P
	mov_[edx],ebp               # P->NEXT = HEAD
	mov_ebp,edx                 # HEAD = P

	mov_eax,ecx                 # put C in place for check
	mov_ebx, &string_char       # Get pointer to "\"'"
	call %In_Set                # Check for string chars
	cmp_eax, !1                 # If string char
	je %Store_String            # Get string

	call %Store_Atom            # Get whole token
	jmp %restart

:done
	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# fgetc function
# Receives FILE* in [Input]
# Returns -4 (EOF) or char in EAX
:fgetc
	push_edx                    # Protect EDX
	push_ecx                    # Protect ECX
	push_ebx                    # Protect EBX
	mov_eax, %-4                # Put EOF in eax
	push_eax                    # Assume bad (If nothing read, value will remain EOF)
	lea_ecx,[esp]               # Get stack address
	mov_ebx,[DWORD] &Input      # Where are we reading from
	mov_eax, %3                 # the syscall number for read
	mov_edx, %1                 # set the size of chars we want
	int !0x80                   # call the Kernel
	pop_eax                     # Get either char or EOF
	pop_ebx                     # Restore EBX
	pop_ecx                     # Restore ECX
	pop_edx                     # Restore EDX
	ret


# Malloc isn't actually required if the program being built fits in the initial memory
# However, it doesn't take much to add it.
# Requires EDI to be initialized and EAX to have the number of desired bytes
:malloc
	push_edx                    # Protect EDX
	push_ecx                    # Protect ECX
	push_ebx                    # Protect EBX

	mov_ebx,edi                 # Using the current pointer
	add_ebx,eax                 # Request the number of desired bytes
	mov_eax, %45                # the Syscall # for SYS_BRK
	int !0x80                   # call the Kernel
	mov_eax,edi                 # Return pointer
	mov_edi,ebx                 # Update pointer

	pop_ebx                     # Restore EBX
	pop_ecx                     # Restore ECX
	pop_edx                     # Restore EDX
	ret


# Purge_LineComment function
# Reads chars until LF and jumps to restart
:Purge_LineComment
	call %fgetc                 # Get a char
	movzx_eax,al                # Zero extend
	cmp_eax, !10                # While not LF
	jne %Purge_LineComment      # Keep reading
	jmp %restart


# Store_String Function
# Receives C in ECX, HEAD in EDX and Input file in [Output]
# Uses EBX for terminator, ECX for C and EDX for string
:Store_String
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX

	mov_eax, %2                 # Using TYPE STRING
	mov_[edx+BYTE],eax !8       # HEAD->TYPE = STRING
	mov_eax, %256               # Malloc the string
	call %malloc                # Get pointer to P
	mov_[edx+BYTE],eax !16      # HEAD->TEXT = STRING
	mov_ebx,ecx                 # Protect terminator
	mov_edx,eax                 # Protect string pointer
:Store_String_Loop
	mov_[edx],cl                # write byte
	call %fgetc                 # read next char
	movzx_eax,al                # Zero extend it
	mov_ecx,eax                 # Update C
	add_edx, !1                 # STRING = STRING + 1
	cmp_ebx,ecx                 # See if we hit terminator
	jne %Store_String_Loop      # Otherwise keep looping

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	mov_eax,edx                 # return HEAD
	jmp %restart


# Store_Atom Function
# Receives C in ECX, HEAD in EDX and Input file in [Input]
# Uses EBX for in_set strings, ECX for C and EDX for string
:Store_Atom
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX

	mov_eax, %256               # Malloc the string
	call %malloc                # Get pointer to P
	mov_[edx+BYTE],eax !16      # HEAD->TEXT = STRING
	mov_ebx, &terminators       # Get pointer to "\n\t "
	mov_edx,eax                 # Protect string pointer
:Store_Atom_loop
	mov_[edx],cl                # write byte
	call %fgetc                 # read next char
	movzx_eax,al                # Zero extend it
	mov_ecx,eax                 # Update C
	add_edx, !1                 # STRING = STRING + 1
	call %In_Set                # Check for terminators
	cmp_eax, !0                 # Check for "\n\t "
	je %Store_Atom_loop         # Loop otherwise

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	mov_eax,edx                 # return HEAD
	ret


# In_Set function
# Receives Char C in EAX and CHAR* in EBX
# Returns 1 if true, zero if false in EAX
:In_Set
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
:In_Set_loop
	mov_cl,[ebx]                # Read char
	movzx_ecx,cl                # Zero extend it

	cmp_eax,ecx                 # See if they match
	je %In_Set_True             # return true

	cmp_ecx, !0                 # Check for NULL
	je %In_Set_False            # return false

	add_ebx, !1                 # s = s + 1
	jmp %In_Set_loop            # Keep looping

:In_Set_True
	mov_eax, %1                 # Set True
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret

:In_Set_False
	mov_eax, %0                 # Set FALSE
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret

# Char sets
:terminators
"
	 "

:comments
";#"

:string_char
'22 27 00'


# Reverse_List function
# Receives List in EAX
# Returns the list reversed in EAX
:Reverse_List
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	mov_ebx,eax                 # Set HEAD
	mov_eax, %0                 # ROOT = NULL
:Reverse_List_Loop
	cmp_ebx, !0                 # WHILE HEAD != NULL
	je %Reverse_List_Done       # Stop otherwise

	mov_ecx,[ebx]               # NEXT = HEAD->NEXT
	mov_[ebx],eax               # HEAD->NEXT = ROOT
	mov_eax,ebx                 # ROOT = HEAD
	mov_ebx,ecx                 # HEAD = NEXT
	jmp %Reverse_List_Loop      # Keep Going

:Reverse_List_Done
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# Identify_Macros function
# Receives List in EAX
# Updates the list in place; does not modify registers
# Uses EBX for DEFINE, ECX for I
:Identify_Macros
	push_eax                    # Protect EAX
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
	mov_ebx, &DEFINE_str        # Setup define string
	mov_ecx,eax                 # I = HEAD
:Identify_Macros_Loop
	mov_eax,[ecx+BYTE] !16      # I->TEXT
	call %match                 # IF "DEFINE" == I->TEXT
	cmp_eax, !0                 # Check if match
	jne %Identify_Macros_Next   # Skip the work

	# Deal with MACRO
	mov_eax, %1                 # Using MACRO
	mov_[ecx+BYTE],eax !8       # I->TYPE = MACRO

	mov_eax,[ecx]               # I->NEXT
	mov_eax,[eax+BYTE] !16      # I->NEXT->TEXT
	mov_[ecx+BYTE],eax !16      # I->TEXT = I->NEXT->TEXT

	mov_eax,[ecx]               # I->NEXT
	mov_eax,[eax]               # I->NEXT->NEXT
	mov_eax,[eax+BYTE] !16      # I->NEXT->NEXT->TEXT
	mov_[ecx+BYTE],eax !24      # I->EXPRESSION = I->NEXT->NEXT->TEXT

	mov_eax,[ecx]               # I->NEXT
	mov_eax,[eax]               # I->NEXT->NEXT
	mov_eax,[eax]               # I->NEXT->NEXT->NEXT
	mov_[ecx],eax               # I->NEXT = I->NEXT->NEXT->NEXT

:Identify_Macros_Next
	mov_ecx,[ecx]               # I = I->NEXT
	cmp_ecx, !0                 # Check for NULL
	jne %Identify_Macros_Loop   # Keep looping otherwise

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	pop_eax                     # Restore EAX
	ret

:DEFINE_str
"DEFINE"


# match function
# Receives CHAR* in EAX and CHAR* in EBX
# Returns 0 (TRUE) or 1 (FALSE) in EAX
:match
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
	mov_ecx,eax                 # S1 in place
	mov_edx,ebx                 # S2 in place
:match_Loop
	mov_al,[ecx]                # S1[0]
	movzx_eax,al                # Make it useful
	mov_bl,[edx]                # S2[0]
	movzx_ebx,bl                # Make it useful
	cmp_eax,ebx                 # See if they match
	jne %match_False            # If not

	add_ecx, !1                 # S1 = S1 + 1
	add_edx, !1                 # S2 = S2 + 1
	cmp_eax, !0                 # If reached end of string
	je %match_Done              # Perfect match
	jmp %match_Loop             # Otherwise keep looping

:match_False
	mov_eax, %1                 # Return false
:match_Done
	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# Line_Macro function
# Receives List in EAX
# Updates the list in place; does not modify registers
# Uses EAX for I, EBX for I->TEXT, ECX for I->EXPRESSION
:Line_Macro
	push_eax                    # Protect EAX
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
:Line_Macro_Loop
	mov_ebx,[eax+BYTE] !8       # I->TYPE
	cmp_ebx, !1                 # IF MACRO == I->TYPE
	jne %Line_Macro_Next        # Otherwise move on

	# Is a macro apply
	mov_ebx,[eax+BYTE] !16      # I->TEXT
	mov_ecx,[eax+BYTE] !24      # I->EXPRESSION
	mov_eax,[eax]               # I->NEXT
	call %Set_Expression        # Apply it
	jmp %Line_Macro_Loop        # Move on to next

:Line_Macro_Next
	mov_eax,[eax]               # I->NEXT
	cmp_eax, !0                 # Check for NULL
	jne %Line_Macro_Loop        # Keep going

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	pop_eax                     # Restore EAX
	ret


# Set_Expression function
# Receives List in EAX, CHAR* in EBX and CHAR* in ECX
# Updates the list in place; does not modify registers
# Uses EBX for C, ECX for EXP and EDX for I
:Set_Expression
	push_eax                    # Protect EAX
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
	mov_edx,eax                 # Set I
:Set_Expression_Loop
	mov_eax,[edx+BYTE] !8       # I->TYPE
	cmp_eax, !1                 # IF MACRO == I->TYPE
	je %Set_Expression_Next     # Ignore and move on

	mov_eax,[edx+BYTE] !16      # I->TEXT
	call %match                 # Check for match
	cmp_eax, !0                 # If match
	jne %Set_Expression_Next    # Otherwise next

	# We have a non-macro match
	mov_[edx+BYTE],ecx !24      # I->EXPRESSION = EXP

:Set_Expression_Next
	mov_edx,[edx]               # I = I->NEXT
	cmp_edx, !0                 # IF NULL == I
	jne %Set_Expression_Loop    # Otherwise keep looping

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	pop_eax                     # Restore EAX
	ret


# Process_String function
# Receives List in EAX
# Update the list in place; does not modify registers
# Uses EBX for I->TEXT, ECX for I and EDX for S
:Process_String
	push_eax                    # Protect EAX
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
	mov_ecx,eax                 # I = HEAD
:Process_String_loop
	mov_eax,[ecx+BYTE] !8       # I->TYPE
	cmp_eax, !2                 # IF STRING == I->TYPE
	jne %Process_String_Next    # Skip to next

	mov_ebx,[ecx+BYTE] !16      # I->TEXT
	mov_al,[ebx]                # I->TEXT[0]
	movzx_eax,al                # make it useful
	cmp_eax, !39                # IF '\'' == I->TEXT[0]
	jne %Process_String_Raw     # Deal with '\"'

	# Deal with '\''
	add_ebx, !1                 # I->TEXT + 1
	mov_[ecx+BYTE],ebx !24      # I->EXPRESSION = I->TEXT + 1
	jmp %Process_String_Next    # Move on to next

:Process_String_Raw
	mov_eax,ebx                 # Get length of I->TEXT
	call %string_length         # Do it
	shr_eax, !2                 # LENGTH = LENGTH >> 2
	add_eax, !1                 # LENGTH = LENGTH + 1
	shl_eax, !3                 # LENGTH = LENGTH << 3
	call %malloc                # Get string
	mov_edx,ebx                 # S = I->TEXT
	add_edx, !1                 # S = S + 1
	mov_[ecx+BYTE],eax !24      # I->EXPRESSION = hexify
	mov_ebx,eax                 # Put hexify buffer in ebx

:Process_String_Raw_Loop
	mov_al,[edx]                # Read 1 chars
	movzx_eax,al                # Make it useful
	add_edx, !1                 # S = S + 1
	cmp_al, !0                  # Check for NULL
	pushf                       # Protect condition
	call %hex8                  # write them all
	popf                        # restore condition
	jne %Process_String_Raw_Loop # Keep looping

:Process_String_Next
	mov_ecx,[ecx]               # I = I->NEXT
	cmp_ecx, !0                 # IF NULL == I
	jne %Process_String_loop    # Otherwise keep looping

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	pop_eax                     # Restore EAX
	ret


# string_length function
# Receives CHAR* in EAX
# Returns INT in EAX
# Uses EAX for CH, EBX for S and ECX for INDEX
:string_length
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	mov_ebx,eax                 # Set S
	mov_ecx, %0                 # INDEX = 0
:string_length_loop
	mov_al,[ebx+ecx]            # S[0]
	movzx_eax,al                # make it useful
	cmp_eax, !0                 # IF NULL == S[0]
	je %string_length_done      # Stop

	add_ecx, !1                 # INDEX = INDEX + 1
	jmp %string_length_loop     # Keep going

:string_length_done
	mov_eax,ecx                 # RETURN INDEX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# Eval_Immediates function
# Receives List in EAX
# Updates the list in place; does not modify registers
# Uses EBX for I->TEXT[0], ECX for I->TEXT[1] and EDX for I
:Eval_Immediates
	push_eax                    # Protect EAX
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
	mov_edx,eax                 # I = HEAD
:Eval_Immediates_Loop
	# Check for MACRO
	mov_eax,[edx+BYTE] !8       # I->TYPE
	cmp_eax, !1                 # IF MACRO == I-TYPE
	je %Eval_Immediates_Next    # Skip to next

	# Check for NULL EXPRESSION
	mov_eax,[edx+BYTE] !24      # I->EXPRESSION
	cmp_eax, !0                 # IF NULL == I->EXPRESSION
	jne %Eval_Immediates_Next   # Skip to next

	# Check if number
	mov_eax,[edx+BYTE] !16      # I->TEXT
	mov_bl,[eax]                # I->TEXT[0]
	movzx_ebx,bl                # Extend to use
	add_eax, !1                 # I->TEXT + 1
	mov_cl,[eax]                # I->TEXT[1]
	movzx_ecx,cl                # Extend to use
	call %numerate_string       # Convert string to INT
	cmp_eax, !0                 # IF 0 == numerate_number(I->TEXT + 1)
	jne %Eval_Immediates_value  # Has a value

	# Last chance for Immediate
	cmp_ecx, !48                # If '0' == I->TEXT[1]
	jne %Eval_Immediates_Next   # Skip to next

:Eval_Immediates_value
	call %express_number        # Convert value to hex string
	mov_[edx+BYTE],eax !24      # I->EXPRESSION = express_number(value, I-TEXT[0])

:Eval_Immediates_Next
	mov_edx,[edx]               # I = I->NEXT
	cmp_edx, !0                 # IF NULL == I
	jne %Eval_Immediates_Loop   # Otherwise keep looping

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	pop_eax                     # Restore EAX
	ret


# numerate_string function
# Receives CHAR* in EAX
# Returns value of CHAR* in EAX
# Uses EAX for VALUE, EBX for S, ECX for CH and EDI for NEGATIVE?
:numerate_string
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
	push_edi                    # Protect EDI
	mov_ebx,eax                 # put S in correct place
	mov_eax, %0                 # Initialize to Zero
:numerate_string_loop
	mov_cl,[ebx+BYTE] !1        # S[1]
	movzx_ecx,cl                # make it useful
	cmp_ecx, !120               # IF 'x' == S[1]
	je %numerate_hex            # Deal with hex input

	# Assume decimal input
	mov_ecx, %0                 # Assume no negation
	mov_cl,[ebx]                # S[0]
	movzx_ecx,cl                # make it useful
	cmp_ecx, !45                # IF '-' == S[0]
	jne %numerate_decimal       # Skip negation

	mov_edi, %1                 # Set FLAG
	add_ebx, !1                 # S = S + 1

:numerate_decimal
	mov_cl,[ebx]                # S[0]
	movzx_ecx,cl                # make it useful
	cmp_ecx, !0                 # IF NULL == S[0]
	je %numerate_decimal_done   # We are done

	imul_eax, !10               # VALUE = VALUE * 10
	sub_ecx, !48                # CH = CH - '0'
	cmp_ecx, !9                 # Check for illegal
	jg %numerate_string_fail    # If CH > '9'
	cmp_ecx, !0                 # Check for illegal
	jl %numerate_string_fail    # IF CH < 0
	add_eax,ecx                 # VALUE = VALUE + CH
	add_ebx, !1                 # S = S + 1
	jmp %numerate_decimal       # Keep looping

:numerate_decimal_done
	cmp_edi, !1                 # Check if need to negate
	jne %numerate_string_done   # Nope

	imul_eax, !-1               # VALUE = VALUE * -1
	jmp %numerate_string_done   # Done

:numerate_hex
	add_ebx, !2                 # S = S + 2
:numerate_hex_loop
	mov_cl,[ebx]                # S[0]
	movzx_ecx,cl                # make it useful
	cmp_ecx, !0                 # IF NULL == S[0]
	je %numerate_string_done    # We are done

	shl_eax, !4                 # VALUE = VALUE << 4
	sub_ecx, !48                # CH = CH - '0'
	cmp_ecx, !10                # IF 10 >= CH
	jl %numerate_hex_digit      # NO
	sub_ecx, !7                 # Push A-F into range
:numerate_hex_digit
	cmp_ecx, !15                # Check for illegal
	jg %numerate_string_fail    # If CH > 'F'
	cmp_ecx, !0                 # Check for illegal
	jl %numerate_string_fail    # IF CH < 0
	add_eax,ecx                 # VALUE = VALUE + CH
	add_ebx, !1                 # S = S + 1
	jmp %numerate_hex_loop      # Keep looping

:numerate_string_fail
	mov_eax, %0                 # return ZERO

:numerate_string_done
	pop_edi                     # Restore EDI
	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# express_number function
# Receives INT in EAX and CHAR in EBX
# Allocates a string and expresses the value in hex
# Returns string in EAX
# Uses EAX for VALUE, EBX for S and ECX for CH
:express_number
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
	mov_ecx,ebx                 # Put CH in right place
	mov_ebx,eax                 # Protect VALUE
	cmp_ecx, !37                # IF '%' == CH
	jne %express_number2        # Otherwise try @

	mov_eax, %9                 # We need 3 bytes
	call %malloc                # Get S pointer
	xchg_eax,ebx                # Put S and VALUE in place
	push_ebx                    # Protect S
	call %hex32l                # Store 32bits
	jmp %express_number_done    # done

:express_number2
	cmp_ecx, !64                # IF '@' == CH
	jne %express_number1        # Othrewise try !

	mov_eax, %5                 # We need 3 bytes
	call %malloc                # Get S pointer
	xchg_eax,ebx                # Put S and VALUE in place
	push_ebx                    # Protect S
	call %hex16l                # Store 16bits
	jmp %express_number_done    # done

:express_number1
	mov_eax, %3                 # We need 3 bytes
	call %malloc                # Get S pointer
	xchg_eax,ebx                # Put S and VALUE in place
	push_ebx                    # Protect S
	call %hex8                  # Store 8bit

:express_number_done
	pop_eax                     # Restore S
	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# HEX to ascii routine
# Receives INT in EAX and CHAR* in EBX
# Stores ascii of INT in CHAR*
# Returns only modifying EAX
:hex64l
	push_eax                    # Protect top 32
	call %hex32l                # Store it
	pop_eax                     # do top 32
	shr_eax, !32                # do bottom 32 first
:hex32l
	push_eax                    # Protect top 16
	call %hex16l                # Store it
	pop_eax                     # do top 16
	shr_eax, !16                # do bottom 16 first
:hex16l
	push_eax                    # Protect top byte
	call %hex8                  # Store it
	pop_eax                     # do high byte
	shr_eax, !8                 # do bottom byte first
:hex8
	push_eax                    # Protect bottom nibble
	shr_eax, !4                 # do high nibble first
	call %hex4                  # Store it
	pop_eax                     # do low nibble
:hex4
	and_eax, !0xF               # isolate nibble
	add_al, !48                 # convert to ascii
	cmp_al, !57                 # valid digit?
	jbe %hex1                   # yes
	add_al, !7                  # use alpha range
:hex1
	mov_[ebx],al                # store result
	add_ebx, !1                 # next position
	ret


# Preserve_Other function
# Receives List in EAX
# Updates the list in place; does not modify registers
# Uses EAX for I, EBX for I->TEXT
:Preserve_Other
	push_eax                    # Protect EAX
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	push_edx                    # Protect EDX
:Preserve_Other_Loop
	mov_ebx,[eax+BYTE] !24      # I->EXPRESSION
	cmp_ebx, !0                 # IF NULL == I->EXPRESSION
	jne %Preserve_Other_Next    # Otherwise next

	# Needs preserving
	mov_ebx,[eax+BYTE] !16      # I->TEXT
	mov_[eax+BYTE],ebx !24      # I->EXPRESSION = I->TEXT

:Preserve_Other_Next
	mov_eax,[eax]               # I = I->NEXT
	cmp_eax, !0                 # IF NULL == I
	jne %Preserve_Other_Loop    # Otherwise keep looping

	pop_edx                     # Restore EDX
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	pop_eax                     # Restore EAX
	ret


# Print_Hex function
# Receives list in EAX
# walks the list and prints the I->EXPRESSION for all nodes followed by newline
# Uses EBX for I
:Print_Hex
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	mov_ebx,ebp                 # I = Head
:Print_Hex_Loop
	mov_eax,[ebx+BYTE] !8       # I->TYPE
	cmp_eax, !1                 # IF MACRO == I->TYPE
	je %Print_Hex_Next          # Skip

	mov_eax,[ebx+BYTE] !24      # Using EXPRESSION
	call %File_Print            # Print it
	mov_eax, %10                # NEWLINE
	call %fputc                 # Append it

:Print_Hex_Next
	mov_ebx,[ebx]               # Iterate to next Token
	cmp_ebx, !0                 # Check for NULL
	jne %Print_Hex_Loop         # Otherwise keep looping

	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# File_Print function
# Receives CHAR* in EAX
# calls fputc for every non-null char
:File_Print
	push_ebx                    # Protect EBX
	push_ecx                    # Protect ECX
	mov_ebx,eax                 # Protect S
	cmp_eax, !0                 # Protect against nulls
	je %File_Print_Done         # Simply don't try to print them
:File_Print_Loop
	mov_al,[ebx]                # Read byte
	movzx_eax,al                # zero extend
	cmp_eax, !0                 # Check for NULL
	je %File_Print_Done         # Stop at NULL

	call %fputc                 # write it
	add_ebx, !1                 # S = S + 1
	jmp %File_Print_Loop        # Keep going

:File_Print_Done
	pop_ecx                     # Restore ECX
	pop_ebx                     # Restore EBX
	ret


# fputc function
# receives CHAR in EAX and FILE* in [Output]
# writes char and returns
:fputc
	push_edx                    # Protect EDX
	push_ecx                    # protect ECX
	push_ebx                    # protect EBX
	push_eax                    # We are writing eax
	lea_ecx,[esp]               # Get stack address
	mov_ebx,[DWORD] &Output     # Write to target file
	mov_eax, %4                 # the syscall number for write
	mov_edx, %1                 # set the size of chars we want
	int !0x80                   # call the Kernel
	pop_eax                     # Restore stack
	pop_ebx                     # Restore EBX
	pop_ecx                     # Restore ECX
	pop_edx                     # Restore EDX
	ret

:Output
	%0
:Input
	%0
:ELF_end
