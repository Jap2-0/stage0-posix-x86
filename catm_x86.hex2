# SPDX-FileCopyrightText: Â© 2019 Jeremiah Orians
#
# SPDX-License-Identifier: GPL-3.0-or-later

	# Register usage:
	# EBP => OUTPUT
	# EDI => Buffer
	# ESI => INPUT

## ELF Header
:ELF_base
7F 45 4C 46                    # e_ident[EI_MAG0-3] ELF's magic number

01                             # e_ident[EI_CLASS] Indicating 32 bit
01                             # e_ident[EI_DATA] Indicating little endianness
01                             # e_ident[EI_VERSION] Indicating original elf

03                             # e_ident[EI_OSABI] Set at 3 because FreeBSD is strict
00                             # e_ident[EI_ABIVERSION] Set at 0 because none cares

00 00 00 00 00 00 00           # e_ident[EI_PAD]

02 00                          # e_type Indicating Executable
03 00                          # e_machine Indicating x86
01 00 00 00                    # e_version Indicating original elf

&_start                        # e_entry Address of the entry point
%ELF_program_headers>ELF_base  # e_phoff Address of program header table
00 00 00 00                    # e_shoff Address of section header table

00 00 00 00                    # e_flags

34 00                          # e_ehsize Indicating our 52 Byte header

20 00                          # e_phentsize size of a program header table
01 00                          # e_phnum number of entries in program table

00 00                          # e_shentsize size of a section header table
00 00                          # e_shnum number of entries in section table

00 00                          # e_shstrndx index of the section names

## Program Header
:ELF_program_headers
:ELF_program_header__text
01 00 00 00                    # ph_type: PT-LOAD = 1
00 00 00 00                    # ph_offset

&ELF_base                      # ph_vaddr
&ELF_base                      # ph_physaddr

%ELF_end>ELF_base              # ph_filesz
%ELF_end>ELF_base              # ph_memsz

07 00 00 00                    # ph_flags: PF-X|PF-W|PF-R = 7
01 00 00 00                    # ph_align

:ELF_text

:_start
	58                          ; pop_eax                     # Get the number of arguments
	5B                          ; pop_ebx                     # Get the program name
	5B                          ; pop_ebx                     # Get the actual output name
	66B9 4102                   ; mov_cx, @577                # Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	66BA 8001                   ; mov_dx, @384                # Prepare file as RW for owner only (600 in octal)
	6A 05                       ; push !5                     # prepare to set eax to 5
	58                          ; pop_eax                     # the syscall number for open()
	CD 80                       ; int !0x80                   # Now open that file
	89C5                        ; mov_ebp,eax                 # Preserve the file pointer we were given

	6A 2D                       ; push !45
	58                          ; pop_eax                     # the Syscall # for SYS_BRK
	31DB                        ; xor_ebx,ebx                 # Get current brk
	CD 80                       ; int !0x80                   # Let the kernel do the work
	89C7                        ; mov_edi,eax                 # Set our malloc pointer

	6A 2D                       ; push !45
	58                          ; pop_eax                     # the Syscall # for SYS_BRK
	89FB                        ; mov_ebx,edi                 # Using current pointer
	81C3 00001000               ; add_ebx, %0x100000          # Allocate 1MB
	CD 80                       ; int !0x80                   # Let the kernel do the work

:core
	5B                          ; pop_ebx                     # Get the actual input name
	85DB                        ; test_ebx,ebx                # Check for null string
	74 !done                    ; je !done                    # Hit null be done

	31C9                        ; xor_ecx,ecx                 # prepare read_only
	31D2                        ; xor_edx,edx                 # prevent any interactions
	6A 05                       ; push !5
	58                          ; pop_eax                     # the syscall number for open()
	CD 80                       ; int !0x80                   # Now open that damn file
	89C6                        ; mov_esi,eax                 # Protect INPUT
:keep
	BA 00001000                 ; mov_edx, %0x100000          # set the size of chars we want
	89F9                        ; mov_ecx,edi                 # Where to put it
	89F3                        ; mov_ebx,esi                 # Where are we reading from
	6A03                        ; push !3
	58                          ; pop_eax                     # the syscall number for read
	CD 80                       ; int !0x80                   # call the Kernel
	50                          ; push_eax                    # Protect the number of bytes read

	89C2                        ; mov_edx,eax                 # Number of bytes to write
	89F9                        ; mov_ecx,edi                 # What we are writing
	89EB                        ; mov_ebx,ebp                 # Write to target file
	6A 04                       ; push !4
	58                          ; pop_eax                     # the syscall number for write
	CD 80                       ; int !0x80                   # call the Kernel

	58                          ; pop_eax                     # Get bytes read
	3D 00001000                 ; cmp_eax, %0x100000          # Check if buffer was fully used
	74 !keep                    ; je !keep                    # Keep looping if was full
	EB !core                    ; jmp !core                   # Otherwise move to next file

:done
	# program completed Successfully
	31DB                        ; xor_ebx,ebx                 # All is well
	6A 01                       ; push !1
	58                          ; pop_eax                     # put the exit syscall number in eax
	CD 80                       ; int !0x80                   # Call it a good day

:ELF_end
